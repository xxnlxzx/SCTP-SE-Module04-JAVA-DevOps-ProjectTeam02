version: 2.1
orbs:
  docker: circleci/docker@2.2.0
  maven: circleci/maven@1.4.1
  snyk: snyk/snyk@1.7.0
jobs:
  build_and_test:
    docker:
      - image: cimg/openjdk:17.0.7
    steps:
      - checkout
      - run: mvn clean package
      - run: |
          echo “Running tests...”
          mvn test

    executor: docker-executor
    steps:
      # 1. Spin up environment
      - checkout

      # 2. Spin up container environment
      - setup_remote_docker

      # 3. Preparing environment variables (if needed)

      # 4. Checkout code
      - attach_workspace:
          at: /home/circleci/project/target  # Adjust this path based on your project structure

      # 5. Restore and cache Maven dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}-{{ checksum "pom.xml" }}
      - run:
          name: Install Dependencies
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}-{{ checksum "pom.xml" }}

      # 6. Install Snyk CLI and test Docker image
      - run: npm install -g snyk
      - run: mvn clean package
      - docker/check
      - run: docker build -t $IMAGE_NAME .
      - run: snyk test --docker $IMAGE_NAME --severity-threshold=low

  cicd_flow:
    executor: docker-executor
    steps:
      # 1. Spin up environment
      - checkout

      # 2. Build JAR
      - run:
          name: Build JAR
          command: mvn package -DskipTests=true
          working_directory: /home/circleci/project  # Path to project

      # 3. Setup a remote Docker engine (optional, depending on your setup)
      - setup_remote_docker

      # 4. Build and Push Docker image
      - run:
          name: Build and Push Docker Image
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin
            docker build -t $DOCKER_LOGIN/module04-project02:$CIRCLE_SHA1 .
            docker push $DOCKER_LOGIN/module04-project02:$CIRCLE_SHA1

      # 5. Run Docker container (optional, you can skip this if not needed)
      - run:
          name: Run Docker Container
          command: |
            docker run -d -p 8000:8080 $DOCKER_LOGIN/module04-project02:$CIRCLE_SHA1

      # 6. Deploy and run the application on Heroku (adjust this step according to your deployment process)
      - run:
          name: Deploy to Heroku
          command: |
            # Add your deployment steps for Heroku here

workflows:
  version: 2
  cicd_flow:
    jobs:
      - ci_flow
      - cicd_flow:
          requires:
            - ci_flow
          filters:
            branches:
              only: develop
